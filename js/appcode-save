/**
 * Main application controller for Jira Epic Analyzer
 * With improved error handling and data validation
 */
class JiraEpicAnalyzer {
  constructor() {
    this.uiController = new UIController();
    this.errorHandler = ErrorHandler; // Store reference to ErrorHandler
    this.initialize();
  }
  
  /**
   * Initialize the application
   */
  initialize() {
    // Set up analyze button click handler
    document.getElementById('analyzeBtn').addEventListener('click', async () => {
      await this.analyzeData();
    });
    
    // Set up reset button handler (delegating to UI controller)
    document.getElementById('resetBtn').addEventListener('click', () => {
      this.uiController.resetForm();
    });
    
    // Initialize tooltips and other UI elements
    this.initializeUIHelpers();
  }
  
  /**
   * Set up UI helper elements
   */
  initializeUIHelpers() {
    // Add SLA info tooltips
    const slaItems = document.querySelectorAll('.sla-item');
    slaItems.forEach(item => {
      const label = item.querySelector('.sla-label').textContent;
      const value = item.querySelector('.sla-value').textContent;
      item.setAttribute('title', `${label} ${value}`);
    });
  }
  
  /**
   * Process and analyze the uploaded CSV data
   */
  async analyzeData() {
    // Clear previous errors and show loading
    ErrorHandler.clear();
    Utils.showLoading();
    
    try {
      // Get file inputs
      const mainFile = document.getElementById('mainCsvFile').files[0];
      const timeFile = document.getElementById('timeCsvFile').files[0];
      
      // Validate main file
      if (!mainFile) {
        throw new Error('Please upload the main Jira CSV file.');
      }
      
      // Show info message about processing
      const totalSize = (mainFile.size + (timeFile ? timeFile.size : 0)) / (1024 * 1024);
      if (totalSize > 5) {
        ErrorHandler.handle(
          `Processing ${totalSize.toFixed(1)}MB of data. This might take a moment...`, 
          '', true, 'info'
        );
      }
      
      // Parse CSV files with improved error handling
      let mainData, timeData;
      
      try {
        mainData = await CSVParser.parseFile(mainFile);
        ErrorHandler.clear(); // Clear info message if successful
      } catch (error) {
        throw new Error(ErrorHandler.formatCSVError(error, mainFile.name));
      }
      
      if (timeFile) {
        try {
          timeData = await CSVParser.parseFile(timeFile);
        } catch (error) {
          ErrorHandler.handle(
            ErrorHandler.formatCSVError(error, timeFile.name),
            'Time CSV Parse Error', true, 'warning'
          );
          // Continue without time data instead of failing completely
          timeData = null;
        }
      } else {
        timeData = null;
      }
      
      // Validate parsed data
      this.validateData(mainData);
      
      // Process CSV data
      const epics = DataProcessor.processMainCSV(mainData);
      
      // Display warning if no epics found
      if (epics.length === 0) {
        ErrorHandler.handle(
          'No epics found in the uploaded CSV file. Please check that your CSV contains records with "Epic" issue type.',
          '', true, 'warning'
        );
        Utils.hideLoading();
        return;
      }
      
      // Process time data if available
      const timeMap = timeData ? DataProcessor.processTimeCSV(timeData) : new Map();
      
      // Merge and analyze data
      const mergedEpics = DataProcessor.mergeEpicData(epics, timeMap);
      const metrics = DataProcessor.calculateMetrics(mergedEpics);
      
      // Display results
      this.uiController.displayResults(mergedEpics, metrics);
      
      // Show success message with counts
      ErrorHandler.handle(
        `Successfully analyzed ${epics.length} epics${timeData ? ' with time tracking data' : ''}.`,
        '', true, 'info'
      );
      
    } catch (error) {
      ErrorHandler.handle(error, 'Analysis Error');
      console.error('Analysis error:', error);
    } finally {
      Utils.hideLoading();
    }
  }
  
  /**
   * Validate parsed CSV data
   * @param {Object} data - Parsed CSV data
   * @throws {Error} - If data is invalid
   */
  validateData(data) {
    // Check if data exists and has expected structure
    if (!data || !data.headers || !data.records) {
      throw new Error('Invalid CSV data structure.');
    }
    
    // Check if we have headers
    if (data.headers.length === 0) {
      throw new Error('CSV file has no headers.');
    }
    
    // Check for minimum required columns
    const requiredColumns = ['Key', 'Issue Type', 'Status', 'Summary'];
    const missingColumns = [];
    
    requiredColumns.forEach(col => {
      // Try to find column with similar name
      const found = data.headers.some(header => 
        header.toLowerCase().includes(col.toLowerCase())
      );
      
      if (!found) {
        missingColumns.push(col);
      }
    });
    
    if (missingColumns.length > 0) {
      throw new Error(`CSV is missing required columns: ${missingColumns.join(', ')}`);
    }
  }
}

// Initialize the application when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  window.app = new JiraEpicAnalyzer();
});